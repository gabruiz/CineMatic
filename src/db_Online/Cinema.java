package db_Online;
// Generated 1-mar-2018 12.26.47 by Hibernate Tools 4.3.1

import CineMatic.RecensioneFactory;
import cinematic.HibernateUtilities;
import java.util.LinkedList;
import java.util.List;

/**
 * Cinema generated by hbm2java
 */
public class Cinema  implements java.io.Serializable {


     private int idCinema;
     private int idGestore;
     private String nomeCinema;
     private String indirizzo;
     private String citta;
     private String provincia;
     private String telefono;
     LinkedList<Sala> listaSala;
     LinkedList<Filmproiettato> listaFilmP;
     LinkedList<Promozione> listaPromozioni;
     public HibernateUtilities hibernateUtilities;
     LinkedList<Recensione> listaRecensioni;
     LinkedList<Filmproiettato> lfpa;

     // oggetti correnti
     private Sala current_sala;
     private Filmproiettato current_fp;
	
    public Cinema() {
	hibernateUtilities = new HibernateUtilities();
        hibernateUtilities.openSession();   
        listaSala=new LinkedList<Sala>();
        listaFilmP=new LinkedList<Filmproiettato>();
        listaPromozioni =new LinkedList<Promozione>();
        listaPromozioni =new LinkedList<Promozione>();
        listaRecensioni = new  LinkedList<Recensione>();
    }

    public Cinema(int idCinema, int idGestore, String nomeCinema, String indirizzo, String citta, String provincia, String telefono) {
       this.idCinema = idCinema;
       this.idGestore = idGestore;
       this.nomeCinema = nomeCinema;
       this.indirizzo = indirizzo;
       this.citta = citta;
       this.provincia = provincia;
       this.telefono = telefono;
       hibernateUtilities = new HibernateUtilities();
        hibernateUtilities.openSession();   
        listaSala=new LinkedList<Sala>();
        listaFilmP=new LinkedList<Filmproiettato>();
        listaPromozioni =new LinkedList<Promozione>();
        listaRecensioni = new  LinkedList<Recensione>();
    }
   
    public int getIdCinema() {
        return this.idCinema;
    }
    
    public void setIdCinema(int idCinema) {
        this.idCinema = idCinema;
    }
    public int getIdGestore() {
        return this.idGestore;
    }
    
    public void setIdGestore(int idGestore) {
        this.idGestore = idGestore;
    }
    public String getNomeCinema() {
        return this.nomeCinema;
    }
    
    public void setNomeCinema(String nomeCinema) {
        this.nomeCinema = nomeCinema;
    }
    public String getIndirizzo() {
        return this.indirizzo;
    }
    
    public void setIndirizzo(String indirizzo) {
        this.indirizzo = indirizzo;
    }
    public String getCitta() {
        return this.citta;
    }
    
    public void setCitta(String citta) {
        this.citta = citta;
    }
    public String getProvincia() {
        return this.provincia;
    }
    
    public void setProvincia(String provincia) {
        this.provincia = provincia;
    }
    public String getTelefono() {
        return this.telefono;
    }
    
    public void setTelefono(String telefono) {
        this.telefono = telefono;
    }

    public int getUltimoIdSala(){
        int idSala = 0;
        if(listaSala.isEmpty())
            return idSala;
        
        idSala = listaSala.getLast().getId().getIdSala();
        return idSala;
    }

    public int getUltimoIdFilmProiettato(){
        int idFilmProiettato = 0;
        if(listaFilmP.isEmpty())
            return idFilmProiettato;
        
        idFilmProiettato = listaFilmP.getLast().getId().getIdFilmProiettato();
        return idFilmProiettato;
    }
    
    public int getPosti(String nomeSala){
        int numeroPosti=0;
        int numeroFile = 0;
        for (Sala s : listaSala){
            if(nomeSala.equalsIgnoreCase(s.getNomeSala())){
                numeroPosti = s.getNumeroPosti();
                numeroFile = s.getNumeroFile();
            }
        }
        return numeroPosti*numeroFile;
    }
    
    public void creaSala(int idSala, int idCinema, String nomeSala, int numeroFile, int numeroPosti){
        SalaId id = new SalaId(idSala, idCinema);
        Sala s = new Sala(id, nomeSala, numeroFile, numeroPosti);

        listaSala.add(s);
        System.out.println(s);
        hibernateUtilities.save(s);        
        
    }
    
    public void creaFilmProiettato(int idFilmProiettato, String nomeSala, String titolo, String ora, float prezzo, Boolean tridimensionale, Boolean anteprima, int numeroPosti){
        
        FilmproiettatoId fId = new FilmproiettatoId(idFilmProiettato, idCinema);

        int idSala = getIdSala(nomeSala);
        Sala s = getSalaById(idSala);
        int nFile = s.getNumeroFile();
        int nPosti = s.getNumeroPosti();
        Filmproiettato fp = new Filmproiettato(fId, idCinema, idSala, nomeSala, nFile, nPosti, titolo,ora,prezzo,tridimensionale,anteprima,numeroPosti);
        
        fp.creaSala(idSala, nFile , nPosti);
        listaFilmP.add(fp);
        hibernateUtilities.save(fp);
        System.out.println(fp);
        
    }
    
    /* Torna il primo film proiettato con quel titolo */ 
    public Filmproiettato getFilmProiettato(String titolo){
        for (Filmproiettato fp : listaFilmP){
            if(titolo.equalsIgnoreCase(fp.getTitolo())){
                System.out.println("Il cinema "+this.idCinema +" proietta il film "+titolo);
                return fp;
            }
        }
        return null;
    }
   
        /* Torna la lista dei film proiettati con quel titolo -> non utilizzato */ 
    public LinkedList<Filmproiettato> getListaFilmProiettato(String titolo){
        LinkedList<Filmproiettato> l = new LinkedList<Filmproiettato>();
        
        for (Filmproiettato fp : listaFilmP)
            if(titolo.equalsIgnoreCase(fp.getTitolo()))
                l.add(fp);
        return l;
    }
    
    public Filmproiettato getFilmProiettatoById(int idFilmProiettato){
        for (Filmproiettato fp : listaFilmP){
            if(idFilmProiettato == fp.getId().getIdFilmProiettato()){
                return fp;
            }
        }
        return null;
    }
        
    public void caricaListaSala(){
        List<Sala> ls = hibernateUtilities.find("sala","Sala");
        
        //System.out.println("Caricamento lista sale...");
        for (Sala s : ls) {
            if (s.getId().getIdCinema()== this.idCinema){
                s.caricaListaPoltrona();
                listaSala.add(s);
                System.out.println(s);
            }
        }
    }
    
    public void caricaListaFilmP(){
        List<Filmproiettato> lfp = hibernateUtilities.find("filmproiettato","Filmproiettato");
        
        //System.out.println("Caricamento lista Film Proiettati...");
        for (Filmproiettato fp : lfp) {
            fp.caricaListaPoltrona();
            if (fp.getId().getIdCinema()== this.idCinema){            
                listaFilmP.add(fp);
            }
        }
    }
    public void caricaListaPromozioni(){
        List<Promozione> lp = hibernateUtilities.find("promozione","Promozione");
        
        System.out.println("Caricamento lista Promozioni..."+lp.size());
        for (Promozione p : lp) {
            if (p.getId().getIdCinema()== this.idCinema){            
                listaPromozioni.add(p);
                System.out.println(p);
            }
        }
    }
        
    
     public void caricaListaRecensioni(){
        List<Recensionecinema> lfp = hibernateUtilities.find("recensionecinema","Recensionecinema");
                
        listaRecensioni = new  LinkedList<Recensione>();
        
        if(lfp !=null){
            for (Recensionecinema rc : lfp) {
                if (rc.getId().getIdCinema()== this.idCinema){            
                    this.listaRecensioni.add(rc);
                }
            }
        }
    }
     
     public void addRecensione(Recensione recensione){
         this.listaRecensioni.add(recensione);
     }
     
     public LinkedList<Recensione> getRecensioni(){
         return this.listaRecensioni;
     }
     
    public LinkedList<Filmproiettato> getPalinsesto(){
        return listaFilmP;
    }

    public LinkedList<Poltrona> getListaPoltrone(int idFilmProiettato){
        LinkedList<Poltrona> lp = new LinkedList<Poltrona>();
        
        
        Filmproiettato fp = getFilmProiettatoById(idFilmProiettato);

                        lp = fp.getListaPoltrona();
                        System.out.println("da getlistapoltrone: "+lp);

                        return lp;
    }
 
    
    public int[] getFileAndPosti(int idFilmProiettato){
        int [] fileAndPosti = new int[2];
            for (Filmproiettato fp : listaFilmP)
            if (fp.getId().getIdFilmProiettato() == idFilmProiettato){

                String nomeSala = fp.getNomeSala();
                for (Sala s : listaSala){
                    System.out.println("confronto "+s.getNomeSala()+" con "+nomeSala);
                    if (s.getNomeSala().equalsIgnoreCase(nomeSala))
                    {
                        System.out.println(""+fileAndPosti[0]);
                        fileAndPosti[0] = s.getNumeroFile();
                        fileAndPosti[1] = s.getNumeroPosti();  
                                return fileAndPosti;
                    }
                }   
            }
        return fileAndPosti;
    }

    public Sala getCurrent_sala() {
        return current_sala;
    }

    public void setCurrent_sala(Sala current_sala) {
        this.current_sala = current_sala;
    }
    
        public LinkedList<Poltrona> getPostiOccupati(int idFilmProiettato){
        LinkedList<Poltrona> lp = new LinkedList<Poltrona>();
       
        for (Filmproiettato fp : listaFilmP)
            if (fp.getId().getIdFilmProiettato() == idFilmProiettato){
                        lp = fp.getListaPostiOccupati();
            }
        return lp;
    }

    public LinkedList<Sala> getListaSala() {
        return listaSala;
    }
    
        public Sala getSalaByIdFp (int idFilmProiettato){
        
           for (Filmproiettato fp : listaFilmP){
              String nomeSala =  fp.getNomeSala();
               for (Sala s: listaSala)
                   if (s.getNomeSala().equalsIgnoreCase(nomeSala))
                           return s;
           }
         return null;
    }
    
    public Sala getSalaByName (String name){
        for (Sala s: listaSala)
            if (s.getNomeSala().equalsIgnoreCase(name))
                return s;
        return null;
    }

    public LinkedList<Filmproiettato> getListaFilmP() {
        return listaFilmP;
    }
        
        
    public Sala getSala (int idFilmProiettato){
        
           for (Filmproiettato fp : listaFilmP){
              String nomeSala =  fp.getNomeSala();
               for (Sala s: listaSala)
                   if (s.getNomeSala().equalsIgnoreCase(nomeSala))
                           return s;
           }
         return null;
    }
    
    
    public int getNumeroFile(String nomeSala){
        int numeroFile = 0;
        for (Sala s : listaSala){
            if(nomeSala.equalsIgnoreCase(s.getNomeSala()))
                numeroFile = s.getNumeroFile();
        }
        return numeroFile;
    }
    
    public int getNumeroPosti(String nomeSala){
        int numeroPosti = 0;
        for (Sala s : listaSala){
            if(nomeSala.equalsIgnoreCase(s.getNomeSala()))
                numeroPosti = s.getNumeroPosti();
        }
        return numeroPosti;
    }
    
    public int getIdSala (String nomeSala){
        int idSala = 0;
        for (Sala s : listaSala){
            if(nomeSala.equalsIgnoreCase(s.getNomeSala()))
                idSala = s.getId().getIdSala();
        }
        return idSala;
    }
        
    public Sala getSalaById (int idSala){        

               for (Sala s: listaSala)
                   if (s.getId().getIdSala() == idSala)
                           return s;
         return null;
    }
    
    public Filmproiettato getFilmPById(int idFilmProiettato){
        for (Filmproiettato fp : listaFilmP){
            if(idFilmProiettato == fp.getId().getIdFilmProiettato()){
                return fp;
            }
        }
        return null;
    }
    
            /* Torna la lista dei film proiettati con quel titolo -> non utilizzato */ 
    public LinkedList<Filmproiettato> getListaFilmPByTitolo(String titolo){
        LinkedList<Filmproiettato> l = new LinkedList<Filmproiettato>();
       
        for (Filmproiettato fp : listaFilmP)
            if(titolo.equalsIgnoreCase(fp.getTitolo()))
                l.add(fp);
        return l;
    }
        
    public void selezionaPoltrona(PoltronaId pId) {
        Filmproiettato fp = getFilmPById(pId.getIdFilmProiettato());
        fp.setPostoOccupato(pId);
    }
        
    @Override
    public String toString() {
        return "Cinema{" + "idCinema=" + idCinema + ", idGestore=" + idGestore + ", nomeCinema=" + nomeCinema + ", indirizzo=" + indirizzo + ", citta=" + citta + ", provincia=" + provincia + ", telefono=" + telefono + ", listaSala=" + listaSala + ", listaFilmP=" + listaFilmP + '}';
    }

    public Boolean checkPromo(int idTipoPromo) {

        for (Promozione tp : listaPromozioni){
            if (tp.getId().getIdPromozione() == idTipoPromo){
                System.out.println("idTipoPromo: "+idTipoPromo+" idPromo: "+tp.getId().getIdPromozione());
                return true;
            }
        }
        return false;
    }

    public int getUltimoIdRecensione() {
        if (listaRecensioni.isEmpty()) return 0;
        else {
                Recensionecinema r = (Recensionecinema) listaRecensioni.getLast();
                return r.getId().getIdRecensione();
        }
    }

    public void creaRecensione(int idRecensione, int idCliente, String recensioneTesto, int punteggio) {
       RecensioneFactory f = new RecensioneFactory();
           Recensione rc = f.creaRecensione("Cinema", idRecensione, idCliente, idCinema, recensioneTesto, punteggio);
           addRecensione(rc);
           hibernateUtilities.save(rc);
            System.out.println("Recensione Cinema Creata");  
    }
	
	    public void selezionaPromozione(int idTipoPromozione){
	PromozioneId pId = new PromozioneId(this.idCinema, idTipoPromozione);
        Promozione p = new Promozione(pId);
        hibernateUtilities.save(p);
	listaPromozioni.add(p);
        System.out.println("Promozione aggiunta al Cinema");
}

    public LinkedList<Filmproiettato> getListaFilmProiettatiAnteprima(){
            lfpa = new LinkedList<Filmproiettato>();
            for(Filmproiettato fp : listaFilmP)
                    if(fp.isAnteprima())
                            lfpa.add(fp);
                    
            return lfpa;
    }

    public int getPostiFilmProiettato(int idFilmProiettato){
            int postiDisponibili = 0;
            for (Filmproiettato fp : lfpa){
                    if((fp.getId().getIdFilmProiettato()==idFilmProiettato)){
                            postiDisponibili = fp.getPostiDisponibili();
                            current_fp = fp;
                    }
            }
            return postiDisponibili;

    }

    public void selezionaPosti(int numeroPosti){
            int nuoviPosti = current_fp.getPostiDisponibili()-numeroPosti;
            if(nuoviPosti<0)
                nuoviPosti = 0;
            current_fp.setPostiDisponibili(nuoviPosti);
            lfpa.add(current_fp);
            hibernateUtilities.save(current_fp);

    }


}


